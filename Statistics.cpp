#include "Statistics.h"

/* The following table holds the number of snapshots (a 25ms) that the "same" drop is
 * visible to the radar sensor, based on an average 1m FOV with a 0Â° sensor tilt
 */
const float dropInFOVsnapshots[NR_OF_BINS] = {
  1.0000, 322.6667, 161.3333, 107.5556, 80.6667, 64.5333, 53.7778, 46.0952,
  40.3333, 35.8519, 32.2667, 29.3333, 26.8889, 24.8205, 23.0476, 21.5111,
  20.1667, 18.9804, 17.9259, 16.9825, 16.1333, 15.3651, 14.6667, 14.0290,
  13.4444, 12.9067, 12.4103, 11.9506, 11.5238, 11.1264, 10.7556, 10.4086,
  10.0833, 9.7778, 9.4902, 9.2190, 8.9630, 8.7207, 8.4912, 8.2735,
  8.0667, 7.8699, 7.6825, 7.5039, 7.3333, 7.1704, 7.0145, 6.8652,
  6.7222, 6.5850, 6.4533, 6.3268, 6.2051, 6.0881, 5.9753, 5.8667,
  5.7619, 5.6608, 5.5632, 5.4689, 5.3778, 5.2896, 5.2043, 5.1217,
  5.0417, 4.9641, 4.8889, 4.8159, 4.7451, 4.6763, 4.6095, 4.5446,
  4.4815, 4.4201, 4.3604, 4.3022, 4.2456, 4.1905, 4.1368, 4.0844,
  4.0333, 3.9835, 3.9350, 3.8876, 3.8413, 3.7961, 3.7519, 3.7088,
  3.6667, 3.6255, 3.5852, 3.5458, 3.5072, 3.4695, 3.4326, 3.3965,
  3.3611, 3.3265, 3.2925, 3.2593, 3.2267, 3.1947, 3.1634, 3.1327,
  3.1026, 3.0730, 3.0440, 3.0156, 2.9877, 2.9602, 2.9333, 2.9069,
  2.8810, 2.8555, 2.8304, 2.8058, 2.7816, 2.7578, 2.7345, 2.7115,
  2.6889, 2.6667, 2.6448, 2.6233, 2.6022, 2.5813, 2.5608, 2.5407,
  2.5208, 2.5013, 2.4821, 2.4631, 2.4444, 2.4261, 2.4080, 2.3901,
  2.3725, 2.3552, 2.3382, 2.3213, 2.3048, 2.2884, 2.2723, 2.2564,
  2.2407, 2.2253, 2.2100, 2.1950, 2.1802, 2.1655, 2.1511, 2.1369,
  2.1228, 2.1089, 2.0952, 2.0817, 2.0684, 2.0552, 2.0422, 2.0294,
  2.0167, 2.0041, 1.9918, 1.9796, 1.9675, 1.9556, 1.9438, 1.9321,
  1.9206, 1.9093, 1.8980, 1.8869, 1.8760, 1.8651, 1.8544, 1.8438,
  1.8333, 1.8230, 1.8127, 1.8026, 1.7926, 1.7827, 1.7729, 1.7632,
  1.7536, 1.7441, 1.7348, 1.7255, 1.7163, 1.7072, 1.6982, 1.6894,
  1.6806, 1.6718, 1.6632, 1.6547, 1.6463, 1.6379, 1.6296, 1.6214,
  1.6133, 1.6053, 1.5974, 1.5895, 1.5817, 1.5740, 1.5663, 1.5588,
  1.5513, 1.5439, 1.5365, 1.5292, 1.5220, 1.5149, 1.5078, 1.5008,
  1.4938, 1.4869, 1.4801, 1.4734, 1.4667, 1.4600, 1.4535, 1.4469,
  1.4405, 1.4341, 1.4277, 1.4214, 1.4152, 1.4090, 1.4029, 1.3968,
  1.3908, 1.3848, 1.3789, 1.3730, 1.3672, 1.3615, 1.3557, 1.3501,
  1.3444, 1.3389, 1.3333, 1.3278, 1.3224, 1.3170, 1.3117, 1.3063,
  1.3011, 1.2959, 1.2907, 1.2855, 1.2804, 1.2754, 1.2703, 1.2654,
  1.2604, 1.2555, 1.2506, 1.2458, 1.2410, 1.2363, 1.2316, 1.2269,
  1.2222, 1.2176, 1.2130, 1.2085, 1.2040, 1.1995, 1.1951, 1.1907,
  1.1863, 1.1819, 1.1776, 1.1733, 1.1691, 1.1649, 1.1607, 1.1565,
  1.1524, 1.1483, 1.1442, 1.1402, 1.1362, 1.1322, 1.1282, 1.1243,
  1.1204, 1.1165, 1.1126, 1.1088, 1.1050, 1.1013, 1.0975, 1.0938,
  1.0901, 1.0864, 1.0828, 1.0792, 1.0756, 1.0720, 1.0684, 1.0649,
  1.0614, 1.0579, 1.0545, 1.0510, 1.0476, 1.0442, 1.0409, 1.0375,
  1.0342, 1.0309, 1.0276, 1.0243, 1.0211, 1.0179, 1.0147, 1.0115,
  1.0083, 1.0052, 1.0021, 0.9990, 0.9959, 0.9928, 0.9898, 0.9867,
  0.9837, 0.9807, 0.9778, 0.9748, 0.9719, 0.9690, 0.9661, 0.9632,
  0.9603, 0.9575, 0.9546, 0.9518, 0.9490, 0.9462, 0.9435, 0.9407,
  0.9380, 0.9353, 0.9326, 0.9299, 0.9272, 0.9245, 0.9219, 0.9193,
  0.9167, 0.9141, 0.9115, 0.9089, 0.9064, 0.9038, 0.9013, 0.8988,
  0.8963, 0.8938, 0.8913, 0.8889, 0.8864, 0.8840, 0.8816, 0.8792,
  0.8768, 0.8744, 0.8721, 0.8697, 0.8674, 0.8651, 0.8627, 0.8604,
  0.8582, 0.8559, 0.8536, 0.8514, 0.8491, 0.8469, 0.8447, 0.8425,
  0.8403, 0.8381, 0.8359, 0.8338, 0.8316, 0.8295, 0.8274, 0.8252,
  0.8231, 0.8210, 0.8190, 0.8169, 0.8148, 0.8128, 0.8107, 0.8087,
  0.8067, 0.8047, 0.8027, 0.8007, 0.7987, 0.7967, 0.7947, 0.7928,
  0.7908, 0.7889, 0.7870, 0.7851, 0.7832, 0.7813, 0.7794, 0.7775,
  0.7756, 0.7738, 0.7719, 0.7701, 0.7683, 0.7664, 0.7646, 0.7628,
  0.7610, 0.7592, 0.7574, 0.7557, 0.7539, 0.7521, 0.7504, 0.7486,
  0.7469, 0.7452, 0.7435, 0.7418, 0.7401, 0.7384, 0.7367, 0.7350,
  0.7333, 0.7317, 0.7300, 0.7284, 0.7267, 0.7251, 0.7235, 0.7218,
  0.7202, 0.7186, 0.7170, 0.7154, 0.7139, 0.7123, 0.7107, 0.7092,
  0.7076, 0.7061, 0.7045, 0.7030, 0.7014, 0.6999, 0.6984, 0.6969,
  0.6954, 0.6939, 0.6924, 0.6909, 0.6895, 0.6880, 0.6865, 0.6851,
  0.6836, 0.6822, 0.6807, 0.6793, 0.6779, 0.6765, 0.6750, 0.6736,
  0.6722, 0.6708, 0.6694, 0.6680, 0.6667, 0.6653, 0.6639, 0.6626,
  0.6612, 0.6599, 0.6585, 0.6572, 0.6558, 0.6545, 0.6532, 0.6519,
  0.6505, 0.6492, 0.6479, 0.6466, 0.6453, 0.6440, 0.6428, 0.6415,
  0.6402, 0.6389, 0.6377, 0.6364, 0.6352, 0.6339, 0.6327, 0.6314
};

/*
const float hydrometeorReflectivityFactor[NR_OF_BINS] = {
  1.0, 1.0, 3.5, 7.3, 12.2, 18.5, 25.8, 34.1,
  43.8, 54.8, 66.6, 80.0, 94.7, 110.5, 127.6, 146.6,
  166.2, 187.8, 210.6, 235.7, 262.1, 289.9, 319.2, 350.8,
  383.9, 419.7, 457.0, 497.2, 539.0, 583.8, 630.4, 680.2,
  731.9, 787.0, 845.7, 906.5, 971.1, 1039.6, 1112.3, 1189.3,
  1270.8, 1355.0, 1446.1, 1542.2, 1643.5, 1750.4, 1865.3, 1986.3,
  2113.5, 2252.4, 2398.4, 2554.3, 2720.9, 2898.5, 3087.8, 3295.4,
  3516.2, 3754.0, 4013.4, 4295.6, 4602.0, 4937.9, 5305.4, 5714.5,
  6168.6, 6675.3, 7252.6, 7906.6, 8659.1, 9540.5, 10592.3, 11881.0,
  13499.9, 15638.5, 18672.9, 23607.9, 34857.9, 34928.6, 34999.3, 35070.2,
  35141.0, 35212.0, 35283.1, 35364.3, 35435.5, 35506.8, 35578.1, 35649.5,
  35721.0, 35792.5, 37520.7, 39279.0, 41088.4, 42938.6, 44818.0, 46749.5,
  48721.6, 50722.3, 52775.7, 54869.9, 56991.9, 59167.3, 61826.2, 64543.5,
  67319.2, 70153.4, 73046.0, 75506.1, 77991.9, 80533.2, 83115.3, 85722.3,
  88385.7, 91628.9, 94930.6, 98290.7, 101709.3, 105186.3, 108721.7, 112315.6,
  115967.9, 119678.6, 123447.8, 128241.4, 133126.4, 138102.6, 143170.2, 148329.1,
  153579.3, 158920.7, 164353.5, 168765.5, 173235.9, 177764.8, 182352.1, 186997.8,
  192887.1, 198867.8, 204939.7, 211103.0, 217357.6, 223703.4, 230140.6, 236669.1,
  243288.9, 250000.0, 256802.4, 263696.1, 270681.2, 277757.5, 284925.1, 292184.1,
  300837.4, 309617.1, 318523.0, 327555.1, 336745.0, 346030.1, 355441.5, 364979.3,
  374643.2, 384433.5, 394350.1, 404392.9, 414596.8, 424892.6, 435314.6, 445863.0,
  456537.6, 467338.5, 478265.7, 489319.2, 500498.9, 511843.6, 523276.3, 534835.3,
  546520.5, 558332.1, 570269.9, 582334.0, 594524.4, 606883.1, 619326.5, 631896.1,
  644592.0, 657414.2, 673153.7, 689079.5, 705191.4, 721535.5, 738020.3, 754691.3,
  771548.6, 788592.0, 805821.6, 823237.4, 840889.0, 858677.7, 876652.6, 894813.7,
  913161.0, 931694.5, 950414.2, 969373.3, 988465.9, 1007744.7, 1027209.6, 1046860.8,
  1066698.2, 1086721.7, 1106988.3, 1127384.8, 1147967.5, 1168736.3, 1192227.9, 1215953.3,
  1239912.3, 1264105.2, 1288531.8, 1313192.1, 1338086.2, 1363214.0, 1388575.6, 1414170.9,
  1440000.0, 1466062.8, 1492359.4, 1518889.7, 1545653.8, 1572651.6, 1599883.1, 1627348.4,
  1655047.5, 1682980.3, 1711146.8, 1739547.1, 1768181.2, 1797048.9, 1826150.5, 1859537.6,
  1893152.9, 1927144.3, 1961362.4, 1995958.0, 2030779.1, 2065978.9, 2101402.8, 2137206.9,
  2173233.8, 2209642.1, 2246352.8, 2283284.4, 2320599.3, 2358133.8, 2396053.0, 2434190.3,
  2472713.8, 2511454.0, 2550581.7, 2589924.8, 2629656.7, 2667924.9, 2706469.6, 2745201.2,
  2784298.1, 2823671.5, 2863321.3, 2903155.5, 2943357.5, 2983836.1, 3024591.0, 3065622.4,
  3106835.0, 3148418.6, 3190278.7, 3232415.3, 3274828.2, 3317419.2, 3360384.4, 3403626.1,
  3447144.2, 3490837.8, 3534908.1, 3579254.9, 3636339.8, 3693772.3, 3751759.6, 3810093.0,
  3868982.7, 3928216.9, 3988009.0, 4048144.0, 4108838.6, 4169984.8, 4231471.4, 4293520.0,
  4355907.4, 4418858.5, 4482146.7, 4546000.2, 4610189.3, 4674945.2, 4736622.8, 4798823.1,
  4861309.9, 4924200.9, 4987616.8, 5051317.0, 5115421.4, 5180053.0, 5244966.5, 5310284.3,
  5376006.2, 5442258.5, 5508789.6, 5575724.9, 5643192.9, 5710937.4, 5779086.1, 5847769.7,
  5916727.5, 5999189.6, 6082222.4, 6165825.9, 6250000.0, 6334744.8, 6420060.3, 6505946.4,
  6592403.2, 6679430.7, 6767028.9, 6855197.7, 6943937.2, 7033247.4, 7123128.2, 7213579.7,
  7304601.9, 7386054.9, 7467811.8, 7550167.2, 7632824.9, 7716082.7, 7799641.3, 7883801.5,
  7968260.9, 8053323.6, 8138837.9, 8224648.9, 8311065.7, 8397777.4, 8485096.6, 8572709.2,
  8660930.8, 8749444.2, 8838568.3, 8939291.9, 9040586.2, 9142451.2, 9244886.8, 9347893.1,
  9451470.1, 9555617.7, 9660336.0, 9765625.0, 9871484.7, 9977915.0, 10084916.0, 10192487.7,
  10300630.0, 10409343.0, 10518626.7, 10653872.4, 10789982.1, 10927134.3, 11064972.9, 11203675.5,
  11343241.9, 11483855.5, 11625151.0, 11767310.4, 11910333.7, 12054408.7, 12199161.0, 12344777.2,
  12463762.3, 12583318.1, 12703444.6, 12824141.7, 12945409.5, 13067248.0, 13189657.1, 13312637.0,
  13436187.5, 13560308.6, 13685000.5, 13810263.0, 13936096.1, 14062500.0, 14189474.5, 14317019.7,
  14474734.4, 14633313.0, 14792963.4, 14953270.9, 15114442.5, 15276477.9, 15439589.6, 15603354.1,
  15767982.4, 15933474.7, 16100047.8, 16267269.1, 16435354.3, 16592191.2, 16749994.2, 16908321.7,
  17067394.0, 17227211.1, 17387998.4, 17549306.1, 17711358.5, 17874384.3, 18037927.3, 18202215.1,
  18367247.7, 18533257.7, 18699780.9, 18867048.8, 19035297.3, 19204055.8, 19373559.1, 19543807.2,
  19715040.0, 19886778.7, 20059262.1, 20232733.4, 20406707.4, 20581426.2, 20756889.7, 20933345.4,
  21110299.5, 21301717.6, 21493999.6, 21687397.3, 21881408.3, 22076283.2, 22272022.1, 22468881.1,
  22666349.0, 22864680.7, 23063876.5, 23264196.8, 23465121.5, 23666910.2, 23906549.5, 24147396.0,
  24389449.6, 24632710.4, 24877178.3, 25123124.2, 25370007.7, 25618098.3, 25867396.0, 26117900.9,
  26369612.9, 26568173.7, 26767759.0, 26967810.4, 27168606.6, 27370147.6, 27572717.2, 27775748.7,
  27979525.1, 28184333.1, 28389600.0, 28595611.7, 28802368.2, 29010160.6, 29218407.6, 29484606.5,
  29752012.5, 30020625.7, 30290445.9, 30561473.4, 30834008.1, 31107451.1, 31382101.2, 31657958.5,
  31935022.8, 32213294.4, 32492773.0, 32773458.8, 33055351.7, 33338451.8, 33622759.0, 33908588.0,
  34195310.8, 34483240.7, 34772377.7, 35062721.9, 35354273.2, 35647031.6, 35940997.2, 36236169.9,
  36532549.7, 36830136.6, 37129260.1, 37429262.6, 37730472.3, 38032889.1, 38336513.0, 38641344.0
};
*/

void Statistics::Begin(Settings *settings, SensorData *sensorData) {
  m_settings = settings;
  m_sensorData = sensorData;
  thresholdFactor = m_settings->GetFloat("ThresholdFactor", DEFAULT_THRESHOLD_FACTOR);
  Reset();
}

void Statistics::Calibrate() {
  // store current magMax values as calibration reference
  for (uint8_t binGroupNr = 0; binGroupNr < NR_OF_BIN_GROUPS; binGroupNr++) {
    // avoid threshold to be 0
    if (m_sensorData->binGroup[binGroupNr].magMax > 0) {
      m_sensorData->binGroup[binGroupNr].magThresh = m_sensorData->binGroup[binGroupNr].magMax;
    } else {
      m_sensorData->binGroup[binGroupNr].magThresh = 1;
    }
  }
}

void Statistics::Calc() {
  uint8_t aboveThresh;
  
  for (uint16_t binNr = 0; binNr < NR_OF_BINS; binNr++) {    
    if (m_sensorData->bin[binNr].mag > m_sensorData->bin[binNr].magMax) {
      m_sensorData->bin[binNr].magMax = m_sensorData->bin[binNr].mag;
    }
  }
    
  // ignore magnitudes below threshold
  for (uint8_t binGroupNr = 0; binGroupNr < NR_OF_BIN_GROUPS; binGroupNr++) { 
    aboveThresh = 0;
    
    // scan through all bins within the group
    for (uint16_t binNr = m_sensorData->binGroup[binGroupNr].firstBin; binNr <= m_sensorData->binGroup[binGroupNr].lastBin; binNr++) {
      if (m_sensorData->bin[binNr].mag > (m_sensorData->binGroup[binGroupNr].magThresh * thresholdFactor)) {
        m_sensorData->bin[binNr].magSum += m_sensorData->bin[binNr].mag;
        aboveThresh = 1;
      }
    }
    if (aboveThresh) {
      m_sensorData->binGroup[binGroupNr].magAboveThreshCnt++;
    }
  }
}

void Statistics::Finalize() {
  uint32_t magSumGroup;
  float magSumGroupKorr;
  float magSumGroupKorrCal;
  float magSumGroupKorrCalThresh;
  float maximum;
  uint32_t nrOfBinsInGroup;

  // bin-level statistics
  m_sensorData->magAVG = 0;
  m_sensorData->magAVGkorr = 0;
  m_sensorData->magMax = 0;
  
  for (uint16_t binNr = 0; binNr < NR_OF_BINS; binNr++) {
    m_sensorData->bin[binNr].magAVG = m_sensorData->bin[binNr].magSum / m_sensorData->snapshotCtr;
    m_sensorData->bin[binNr].magAVGkorr = m_sensorData->bin[binNr].magAVG / dropInFOVsnapshots[binNr];
    ////m_sensorData->bin[binNr].magAVGkorr = m_sensorData->bin[binNr].magAVG / dropInFOVsnapshots[binNr] / hydrometeorReflectivityFactor[binNr];

    if (binNr > 0) {
      m_sensorData->magAVG += m_sensorData->bin[binNr].magAVG;
      m_sensorData->magAVGkorr += m_sensorData->bin[binNr].magAVGkorr;
      
      if (m_sensorData->bin[binNr].magMax > m_sensorData->magMax) {
        m_sensorData->magMax = m_sensorData->bin[binNr].magMax;
      }
    }
  }
  m_sensorData->magAVG /= NR_OF_BINS - 1;
  m_sensorData->magAVGkorr /= NR_OF_BINS - 1;


  // group-level statistics
  m_sensorData->dominantGroup = 0;
  maximum = 0;
  
  for (uint8_t binGroupNr = 0; binGroupNr < NR_OF_BIN_GROUPS; binGroupNr++) {
    nrOfBinsInGroup = 0;
    magSumGroup = 0;
    magSumGroupKorr = 0;
    m_sensorData->binGroup[binGroupNr].magMax = 0;
   
    // scan through all bins within the group
    for (uint16_t binNr = m_sensorData->binGroup[binGroupNr].firstBin; binNr <= m_sensorData->binGroup[binGroupNr].lastBin; binNr++) {
      magSumGroup += m_sensorData->bin[binNr].magSum;
      magSumGroupKorr += m_sensorData->bin[binNr].magSum / dropInFOVsnapshots[binNr];
      ////magSumGroupKorr += m_sensorData->bin[binNr].magSum / dropInFOVsnapshots[binNr] / hydrometeorReflectivityFactor[binNr];
      
      if (m_sensorData->bin[binNr].magMax > m_sensorData->binGroup[binGroupNr].magMax) {
        m_sensorData->binGroup[binGroupNr].magMax = m_sensorData->bin[binNr].magMax;
      }
      nrOfBinsInGroup++;
    }
    m_sensorData->binGroup[binGroupNr].magAVG = magSumGroup / (float)nrOfBinsInGroup / (float)m_sensorData->snapshotCtr;
    m_sensorData->binGroup[binGroupNr].magAVGkorr = magSumGroupKorr / (float)nrOfBinsInGroup / (float)m_sensorData->snapshotCtr;

    if (m_sensorData->binGroup[binGroupNr].magAVGkorr > maximum) {
      maximum = m_sensorData->binGroup[binGroupNr].magAVGkorr;
      m_sensorData->dominantGroup = binGroupNr;
    }

    m_sensorData->binGroup[binGroupNr].magAVGkorrDom = 0;
  }
  
  m_sensorData->binGroup[m_sensorData->dominantGroup].magAVGkorrDom = m_sensorData->binGroup[m_sensorData->dominantGroup].magAVGkorr;
}

void Statistics::Reset()
{
  // bin-level
  for (uint16_t binNr = 0; binNr < NR_OF_BINS; binNr++) {
    m_sensorData->bin[binNr].magSum = 0;
    m_sensorData->bin[binNr].magMax = 0;
  }

  // group-level
  for (uint8_t binGroupNr = 0; binGroupNr < NR_OF_BIN_GROUPS; binGroupNr++) {
    m_sensorData->binGroup[binGroupNr].magAboveThreshCnt = 0;  
  }

  m_sensorData->ADCpeakSample = 0;
  m_sensorData->clippingCtr = 0;
  m_sensorData->RbOvCtr = 0;
  m_sensorData->snapshotCtr = 0;
}

