#include "SigProc.h"

#define N_WAVETABLE_bits           10
#define N_WAVETABLE                (1 << N_WAVETABLE_bits)
#define N_WAVETABLE_HALF           (N_WAVETABLE >> 1)
#define N_WAVETABLE_QUARTER        (N_WAVETABLE >> 2)

#define BARS                       64

volatile int16_t SigProc::sampleRb[RINGBUFFER_SIZE];
volatile uint32_t SigProc::samplePtrIn;
volatile uint32_t SigProc::samplePtrOut;
volatile uint32_t SigProc::RbOvFlag;
volatile byte SigProc::m_adcPin;

const int16_t COS_3WAVE4_TABLE[N_WAVETABLE - N_WAVETABLE_QUARTER] = {
  32767,  32766,  32764,  32761,  32757,  32751,  32744,  32736,
  32727,  32717,  32705,  32692,  32678,  32662,  32646,  32628,
  32609,  32588,  32567,  32544,  32520,  32495,  32468,  32441,
  32412,  32382,  32350,  32318,  32284,  32249,  32213,  32176,
  32137,  32097,  32056,  32014,  31970,  31926,  31880,  31833,
  31785,  31735,  31684,  31633,  31580,  31525,  31470,  31413,
  31356,  31297,  31236,  31175,  31113,  31049,  30984,  30918,
  30851,  30783,  30713,  30643,  30571,  30498,  30424,  30349,
  30272,  30195,  30116,  30036,  29955,  29873,  29790,  29706,
  29621,  29534,  29446,  29358,  29268,  29177,  29085,  28992,
  28897,  28802,  28706,  28608,  28510,  28410,  28309,  28208,
  28105,  28001,  27896,  27790,  27683,  27575,  27466,  27355,
  27244,  27132,  27019,  26905,  26789,  26673,  26556,  26437,
  26318,  26198,  26077,  25954,  25831,  25707,  25582,  25456,
  25329,  25201,  25072,  24942,  24811,  24679,  24546,  24413,
  24278,  24143,  24006,  23869,  23731,  23592,  23452,  23311,
  23169,  23027,  22883,  22739,  22594,  22448,  22301,  22153,
  22004,  21855,  21705,  21554,  21402,  21249,  21096,  20942,
  20787,  20631,  20474,  20317,  20159,  20000,  19840,  19680,
  19519,  19357,  19194,  19031,  18867,  18702,  18537,  18371,
  18204,  18036,  17868,  17699,  17530,  17360,  17189,  17017,
  16845,  16672,  16499,  16325,  16150,  15975,  15799,  15623,
  15446,  15268,  15090,  14911,  14732,  14552,  14372,  14191,
  14009,  13827,  13645,  13462,  13278,  13094,  12909,  12724,
  12539,  12353,  12166,  11980,  11792,  11604,  11416,  11227,
  11038,  10849,  10659,  10469,  10278,  10087,   9895,   9703,
   9511,   9319,   9126,   8932,   8739,   8545,   8351,   8156,
   7961,   7766,   7571,   7375,   7179,   6982,   6786,   6589,
   6392,   6195,   5997,   5799,   5601,   5403,   5205,   5006,
   4807,   4608,   4409,   4210,   4011,   3811,   3611,   3411,
   3211,   3011,   2811,   2610,   2410,   2209,   2009,   1808,
   1607,   1406,   1206,   1005,    804,    603,    402,    201,
   
      0,   -200,   -401,   -602,   -803,  -1004,  -1205,  -1405,
  -1606,  -1807,  -2008,  -2208,  -2409,  -2609,  -2810,  -3010,
  -3210,  -3410,  -3610,  -3810,  -4010,  -4209,  -4408,  -4607,
  -4806,  -5005,  -5204,  -5402,  -5600,  -5798,  -5996,  -6194,
  -6391,  -6588,  -6785,  -6981,  -7178,  -7374,  -7570,  -7765,
  -7960,  -8155,  -8350,  -8544,  -8738,  -8931,  -9125,  -9318,
  -9510,  -9702,  -9894, -10086, -10277, -10468, -10658, -10848,
 -11037, -11226, -11415, -11603, -11791, -11979, -12165, -12352,
 -12538, -12723, -12908, -13093, -13277, -13461, -13644, -13826,
 -14008, -14190, -14371, -14551, -14731, -14910, -15089, -15267,
 -15445, -15622, -15798, -15974, -16149, -16324, -16498, -16671,
 -16844, -17016, -17188, -17359, -17529, -17698, -17867, -18035,
 -18203, -18370, -18536, -18701, -18866, -19030, -19193, -19356,
 -19518, -19679, -19839, -19999, -20158, -20316, -20473, -20630,
 -20786, -20941, -21095, -21248, -21401, -21553, -21704, -21854,
 -22003, -22152, -22300, -22447, -22593, -22738, -22882, -23026,
 -23168, -23310, -23451, -23591, -23730, -23868, -24005, -24142,
 -24277, -24412, -24545, -24678, -24810, -24941, -25071, -25200,
 -25328, -25455, -25581, -25706, -25830, -25953, -26076, -26197,
 -26317, -26436, -26555, -26672, -26788, -26904, -27018, -27131,
 -27243, -27354, -27465, -27574, -27682, -27789, -27895, -28000,
 -28104, -28207, -28308, -28409, -28509, -28607, -28705, -28801,
 -28896, -28991, -29084, -29176, -29267, -29357, -29445, -29533,
 -29620, -29705, -29789, -29872, -29954, -30035, -30115, -30194,
 -30271, -30348, -30423, -30497, -30570, -30642, -30712, -30782,
 -30850, -30917, -30983, -31048, -31112, -31174, -31235, -31296,
 -31355, -31412, -31469, -31524, -31579, -31632, -31683, -31734,
 -31784, -31832, -31879, -31925, -31969, -32013, -32055, -32096,
 -32136, -32175, -32212, -32248, -32283, -32317, -32349, -32381,
 -32411, -32440, -32467, -32494, -32519, -32543, -32566, -32587,
 -32608, -32627, -32645, -32661, -32677, -32691, -32704, -32716,
 -32726, -32735, -32743, -32750, -32756, -32760, -32763, -32765,

 -32766, -32765, -32763, -32760, -32756, -32750, -32743, -32735,
 -32726, -32716, -32704, -32691, -32677, -32661, -32645, -32627,
 -32608, -32587, -32566, -32543, -32519, -32494, -32467, -32440,
 -32411, -32381, -32349, -32317, -32283, -32248, -32212, -32175,
 -32136, -32096, -32055, -32013, -31969, -31925, -31879, -31832,
 -31784, -31734, -31683, -31632, -31579, -31524, -31469, -31412,
 -31355, -31296, -31235, -31174, -31112, -31048, -30983, -30917,
 -30850, -30782, -30712, -30642, -30570, -30497, -30423, -30348,
 -30271, -30194, -30115, -30035, -29954, -29872, -29789, -29705,
 -29620, -29533, -29445, -29357, -29267, -29176, -29084, -28991,
 -28896, -28801, -28705, -28607, -28509, -28409, -28308, -28207,
 -28104, -28000, -27895, -27789, -27682, -27574, -27465, -27354,
 -27243, -27131, -27018, -26904, -26788, -26672, -26555, -26436,
 -26317, -26197, -26076, -25953, -25830, -25706, -25581, -25455,
 -25328, -25200, -25071, -24941, -24810, -24678, -24545, -24412,
 -24277, -24142, -24005, -23868, -23730, -23591, -23451, -23310,
 -23168, -23026, -22882, -22738, -22593, -22447, -22300, -22152,
 -22003, -21854, -21704, -21553, -21401, -21248, -21095, -20941,
 -20786, -20630, -20473, -20316, -20158, -19999, -19839, -19679,
 -19518, -19356, -19193, -19030, -18866, -18701, -18536, -18370,
 -18203, -18035, -17867, -17698, -17529, -17359, -17188, -17016,
 -16844, -16671, -16498, -16324, -16149, -15974, -15798, -15622,
 -15445, -15267, -15089, -14910, -14731, -14551, -14371, -14190,
 -14008, -13826, -13644, -13461, -13277, -13093, -12908, -12723,
 -12538, -12352, -12165, -11979, -11791, -11603, -11415, -11226,
 -11037, -10848, -10658, -10468, -10277, -10086,  -9894,  -9702,
 -9510,   -9318,  -9125,  -8931,  -8738,  -8544,  -8350,  -8155,
 -7960,   -7765,  -7570,  -7374,  -7178,  -6981,  -6785,  -6588,
 -6391,   -6194,  -5996,  -5798,  -5600,  -5402,  -5204,  -5005,
 -4806,   -4607,  -4408,  -4209,  -4010,  -3810,  -3610,  -3410,
 -3210,   -3010,  -2810,  -2609,  -2409,  -2208,  -2008,  -1807,
 -1606,   -1405,  -1205,  -1004,   -803,   -602,   -401,   -200
};

const uint16_t HANN_WINDOW_TABLE[N_WAVETABLE] = {
  0, 0, 1, 3, 5, 8, 11, 15,
  20, 25, 31, 37, 44, 52, 61, 69, 
  79, 89, 100, 111, 123, 136, 149, 163, 
  178, 193, 208, 225, 242, 259, 277, 296, 
  315, 335, 356, 377, 399, 421, 444, 468, 
  492, 517, 542, 568, 595, 622, 650, 678, 
  707, 736, 766, 797, 829, 860, 893, 926, 
  960, 994, 1029, 1064, 1100, 1136, 1174, 1211, 
  1250, 1288, 1328, 1368, 1408, 1449, 1491, 1533, 
  1576, 1619, 1663, 1708, 1753, 1798, 1844, 1891, 
  1938, 1986, 2034, 2083, 2133, 2182, 2233, 2284, 
  2335, 2387, 2440, 2493, 2547, 2601, 2655, 2711, 
  2766, 2823, 2879, 2937, 2994, 3053, 3111, 3170, 
  3230, 3290, 3351, 3412, 3474, 3536, 3599, 3662, 
  3726, 3790, 3855, 3920, 3985, 4051, 4118, 4185, 
  4252, 4320, 4388, 4457, 4526, 4596, 4666, 4737, 
  4808, 4879, 4951, 5023, 5096, 5169, 5243, 5317, 
  5391, 5466, 5541, 5617, 5693, 5769, 5846, 5923, 
  6001, 6079, 6157, 6236, 6315, 6395, 6475, 6555, 
  6636, 6717, 6798, 6880, 6962, 7045, 7128, 7211, 
  7294, 7378, 7463, 7547, 7632, 7717, 7803, 7889, 
  7975, 8061, 8148, 8235, 8323, 8411, 8499, 8587, 
  8676, 8765, 8854, 8943, 9033, 9123, 9214, 9304, 
  9395, 9486, 9578, 9669, 9761, 9853, 9946, 10038, 
  10131, 10224, 10318, 10411, 10505, 10599, 10693, 10788, 
  10883, 10977, 11073, 11168, 11263, 11359, 11455, 11551, 
  11647, 11744, 11840, 11937, 12034, 12131, 12228, 12326, 
  12423, 12521, 12619, 12717, 12815, 12913, 13012, 13110, 
  13209, 13308, 13407, 13506, 13605, 13704, 13803, 13903, 
  14002, 14102, 14201, 14301, 14401, 14501, 14601, 14701, 
  14801, 14901, 15002, 15102, 15202, 15303, 15403, 15503, 
  15604, 15704, 15805, 15906, 16006, 16107, 16207, 16308, 
  
  16409, 16509, 16610, 16711, 16811, 16912, 17012, 17113, 
  17213, 17314, 17414, 17515, 17615, 17715, 17816, 17916, 
  18016, 18116, 18216, 18316, 18416, 18516, 18615, 18715, 
  18815, 18914, 19014, 19113, 19212, 19311, 19410, 19509, 
  19608, 19706, 19805, 19903, 20001, 20099, 20197, 20295, 
  20393, 20490, 20587, 20685, 20782, 20878, 20975, 21072, 
  21168, 21264, 21360, 21456, 21551, 21647, 21742, 21837, 
  21932, 22026, 22121, 22215, 22309, 22403, 22496, 22589, 
  22682, 22775, 22868, 22960, 23052, 23144, 23235, 23326, 
  23417, 23508, 23599, 23689, 23779, 23868, 23958, 24047, 
  24136, 24224, 24312, 24400, 24488, 24575, 24662, 24749, 
  24835, 24921, 25007, 25092, 25178, 25262, 25347, 25431, 
  25514, 25598, 25681, 25764, 25846, 25928, 26009, 26091, 
  26172, 26252, 26332, 26412, 26491, 26570, 26649, 26727, 
  26805, 26882, 26960, 27036, 27112, 27188, 27264, 27339, 
  27413, 27488, 27561, 27635, 27708, 27780, 27852, 27924, 
  27995, 28066, 28136, 28206, 28275, 28344, 28413, 28481, 
  28549, 28616, 28683, 28749, 28815, 28880, 28945, 29009, 
  29073, 29136, 29199, 29262, 29324, 29385, 29446, 29507, 
  29567, 29626, 29685, 29744, 29802, 29859, 29916, 29973, 
  30029, 30084, 30139, 30193, 30247, 30301, 30353, 30406, 
  30457, 30509, 30559, 30610, 30659, 30708, 30757, 30805, 
  30852, 30899, 30946, 30992, 31037, 31082, 31126, 31169, 
  31212, 31255, 31297, 31338, 31379, 31419, 31459, 31498, 
  31537, 31575, 31612, 31649, 31685, 31721, 31756, 31790, 
  31824, 31858, 31890, 31923, 31954, 31985, 32016, 32045, 
  32075, 32103, 32131, 32159, 32186, 32212, 32238, 32263, 
  32287, 32311, 32334, 32357, 32379, 32401, 32421, 32442, 
  32461, 32480, 32499, 32517, 32534, 32550, 32566, 32582, 
  32597, 32611, 32624, 32637, 32650, 32661, 32672, 32683, 
  32693, 32702, 32711, 32719, 32726, 32733, 32739, 32745, 
  32750, 32754, 32758, 32761, 32763, 32765, 32766, 32767, 
  
  32767, 32766, 32765, 32763, 32761, 32758, 32754, 32750, 
  32745, 32739, 32733, 32726, 32719, 32711, 32702, 32693, 
  32683, 32672, 32661, 32650, 32637, 32624, 32611, 32597, 
  32582, 32566, 32550, 32534, 32517, 32499, 32480, 32461, 
  32442, 32421, 32401, 32379, 32357, 32334, 32311, 32287, 
  32263, 32238, 32212, 32186, 32159, 32131, 32103, 32075, 
  32045, 32016, 31985, 31954, 31923, 31890, 31858, 31824, 
  31790, 31756, 31721, 31685, 31649, 31612, 31575, 31537, 
  31498, 31459, 31419, 31379, 31338, 31297, 31255, 31212, 
  31169, 31126, 31082, 31037, 30992, 30946, 30899, 30852, 
  30805, 30757, 30708, 30659, 30610, 30559, 30509, 30457, 
  30406, 30353, 30301, 30247, 30193, 30139, 30084, 30029, 
  29973, 29916, 29859, 29802, 29744, 29685, 29626, 29567, 
  29507, 29446, 29385, 29324, 29262, 29199, 29136, 29073, 
  29009, 28945, 28880, 28815, 28749, 28683, 28616, 28549, 
  28481, 28413, 28344, 28275, 28206, 28136, 28066, 27995, 
  27924, 27852, 27780, 27708, 27635, 27561, 27488, 27413, 
  27339, 27264, 27188, 27112, 27036, 26960, 26882, 26805, 
  26727, 26649, 26570, 26491, 26412, 26332, 26252, 26172, 
  26091, 26009, 25928, 25846, 25764, 25681, 25598, 25514, 
  25431, 25347, 25262, 25178, 25092, 25007, 24921, 24835, 
  24749, 24662, 24575, 24488, 24400, 24312, 24224, 24136, 
  24047, 23958, 23868, 23779, 23689, 23599, 23508, 23417, 
  23326, 23235, 23144, 23052, 22960, 22868, 22775, 22682, 
  22589, 22496, 22403, 22309, 22215, 22121, 22026, 21932, 
  21837, 21742, 21647, 21551, 21456, 21360, 21264, 21168, 
  21072, 20975, 20878, 20782, 20685, 20587, 20490, 20393, 
  20295, 20197, 20099, 20001, 19903, 19805, 19706, 19608, 
  19509, 19410, 19311, 19212, 19113, 19014, 18914, 18815, 
  18715, 18615, 18516, 18416, 18316, 18216, 18116, 18016, 
  17916, 17816, 17715, 17615, 17515, 17414, 17314, 17213, 
  17113, 17012, 16912, 16811, 16711, 16610, 16509, 16409, 
  
  16308, 16207, 16107, 16006, 15906, 15805, 15704, 15604, 
  15503, 15403, 15303, 15202, 15102, 15002, 14901, 14801, 
  14701, 14601, 14501, 14401, 14301, 14201, 14102, 14002, 
  13903, 13803, 13704, 13605, 13506, 13407, 13308, 13209, 
  13110, 13012, 12913, 12815, 12717, 12619, 12521, 12423, 
  12326, 12228, 12131, 12034, 11937, 11840, 11744, 11647, 
  11551, 11455, 11359, 11263, 11168, 11073, 10977, 10883, 
  10788, 10693, 10599, 10505, 10411, 10318, 10224, 10131, 
  10038, 9946, 9853, 9761, 9669, 9578, 9486, 9395, 
  9304, 9214, 9123, 9033, 8943, 8854, 8765, 8676, 
  8587, 8499, 8411, 8323, 8235, 8148, 8061, 7975, 
  7889, 7803, 7717, 7632, 7547, 7463, 7378, 7294, 
  7211, 7128, 7045, 6962, 6880, 6798, 6717, 6636, 
  6555, 6475, 6395, 6315, 6236, 6157, 6079, 6001, 
  5923, 5846, 5769, 5693, 5617, 5541, 5466, 5391, 
  5317, 5243, 5169, 5096, 5023, 4951, 4879, 4808, 
  4737, 4666, 4596, 4526, 4457, 4388, 4320, 4252, 
  4185, 4118, 4051, 3985, 3920, 3855, 3790, 3726, 
  3662, 3599, 3536, 3474, 3412, 3351, 3290, 3230, 
  3170, 3111, 3053, 2994, 2937, 2879, 2823, 2766, 
  2711, 2655, 2601, 2547, 2493, 2440, 2387, 2335, 
  2284, 2233, 2182, 2133, 2083, 2034, 1986, 1938, 
  1891, 1844, 1798, 1753, 1708, 1663, 1619, 1576, 
  1533, 1491, 1449, 1408, 1368, 1328, 1288, 1250, 
  1211, 1174, 1136, 1100, 1064, 1029, 994, 960, 
  926, 893, 860, 829, 797, 766, 736, 707, 
  678, 650, 622, 595, 568, 542, 517, 492, 
  468, 444, 421, 399, 377, 356, 335, 315, 
  296, 277, 259, 242, 225, 208, 193, 178, 
  163, 149, 136, 123, 111, 100, 89, 79, 
  69, 61, 52, 44, 37, 31, 25, 20, 
  15, 11, 8, 5, 3, 1, 0, 0
};

void SigProc::Begin(Settings *settings, SensorData *sensorData, Statistics *statistics, Publisher *publisher) {
  m_sensorData = sensorData;
  m_settings = settings;
  m_statistics = statistics;
  m_publisher = publisher;
  m_isCapturing = false;
  m_adcPin = m_settings->GetByte("ADCPIN", 33);

  publishInterval = m_settings->GetUInt("PublishInterval", DEFAULT_PUBLISH_INTERVAL);

  // Initialize the ADC
  analogSetAttenuation(ADC_6db);
  analogSetWidth(12);
  analogSetCycles(8);
  analogSetSamples(1);
  analogSetClockDiv(1);
  adcAttachPin(m_adcPin);

  // Initialize timer for ADC
  timer = timerBegin(0, 868, true);
  timerAttachInterrupt(timer, &SigProc::onTimer, true);
  timerAlarmWrite(timer, 9, true);
}

void IRAM_ATTR SigProc::onTimer()
{
  int16_t data;
  uint32_t diff;

  data = analogRead(m_adcPin);

  //digitalWrite(DEBUG_GPIO_ISR, HIGH);

  sampleRb[samplePtrIn] = data - 2048;
  samplePtrIn = (++samplePtrIn) & (RINGBUFFER_SIZE - 1);

  if (samplePtrIn == samplePtrOut)
    RbOvFlag = 1;

  //digitalWrite(DEBUG_GPIO_ISR, LOW);
}

void SigProc::Handle()
{
  while (SnapPending()) {
    //digitalWrite(DEBUG_GPIO_MAIN, HIGH);

    Calc();

    // check if no ringbuffer overflow occurred before or during signal processing
    if (!RbOvFlag) {
      m_statistics->Calc();
      m_sensorData->snapshotCtr++;

      // 1/0,025 ms = 40 snapshots/s (ringbuffer overflows ignored)
      if (m_sensorData->snapshotCtr >= (40 * publishInterval)) {
        m_statistics->Finalize();
        m_publisher->Publish(m_sensorData);
/*        
        // FOR DEBUG PURPOSE ONLY
        StopCapture();
        //DebugConsoleOutSamples(0, 40);
        DebugConsoleOutBins(0, 40);
        StartCapture();
*/
        m_statistics->Reset();
        m_sensorData->RbOvCtr = 0;
        m_sensorData->snapshotCtr = 0;
      }
    } else {
      Serial.println("RINGBUFFER OVERFLOW!");
      m_sensorData->RbOvCtr++;
      RbOvFlag = 0;
    }

    //digitalWrite(DEBUG_GPIO_MAIN, LOW);    
  }
}

void SigProc::StartCapture() {
  samplePtrIn = 0;
  samplePtrOut = 0;
  if (timer) {
    timerAlarmEnable(timer);
    while (samplePtrIn < NR_OF_FFT_SAMPLES) {}
    m_isCapturing = true;
  } 
}

void SigProc::StopCapture() {
  if (timer) {
    timerAlarmDisable(timer);
  }
  m_isCapturing = false;
}

uint8_t SigProc::SnapPending() {
  uint32_t samplePtrIn_tmp;
  uint32_t diff;

  samplePtrIn_tmp = samplePtrIn;
  
  if (samplePtrIn_tmp > samplePtrOut) {
    diff = samplePtrIn_tmp - samplePtrOut;
  } else {
    diff = (samplePtrIn_tmp + RINGBUFFER_SIZE) - samplePtrOut;
  }

  // bufferPtrIn must be at least NR_OF_FFT_SAMPLES ahead
  if (diff >= NR_OF_FFT_SAMPLES) {
    return 1;
  }

  return 0;
}

void SigProc::Calc()
{
  int16_t sample;
  uint16_t sampleABS;
  uint16_t lastSampleIdx;
  uint16_t RBidx;
  int32_t sampleSUM;
  int16_t re[NR_OF_FFT_SAMPLES];
  int16_t im[NR_OF_FFT_SAMPLES];

  // Do not modify the sampleRb content!

  lastSampleIdx = (samplePtrOut + NR_OF_FFT_SAMPLES) & (RINGBUFFER_SIZE - 1);

  // calculate ADC offset
  sampleSUM = 0;
  for (uint16_t i = 0; i < NR_OF_FFT_SAMPLES; i++) {
    RBidx = (samplePtrOut + i) & (RINGBUFFER_SIZE - 1);
    sampleSUM += sampleRb[RBidx];
  }
  m_sensorData->ADCoffset = sampleSUM >> NR_OF_FFT_SAMPLES_bit;

  // process each sample
  for (uint16_t i = 0; i < NR_OF_FFT_SAMPLES; i++) {
    RBidx = (samplePtrOut + i) & (RINGBUFFER_SIZE - 1);
    sample = sampleRb[RBidx];

    if ((sample <= -2048) || (sample >= 2047)) {
      m_sensorData->clippingCtr++;
    }

    sample -= m_sensorData->ADCoffset;

    sampleABS = abs(sample);
    if (sampleABS > m_sensorData->ADCpeakSample) {
      m_sensorData->ADCpeakSample = sampleABS;
    }

    re[i] = sample << 4;
    im[i] = 0;
  }

  HannWindow(re, NR_OF_FFT_SAMPLES_bit);
  FFT(re, im, NR_OF_FFT_SAMPLES_bit);

  for (uint16_t binNr = 0; binNr < NR_OF_BINS; binNr++) {
    m_sensorData->bin[binNr].mag = sqrt(pow(re[binNr], 2) + pow(im[binNr], 2));
  }

  samplePtrOut = (samplePtrOut + (NR_OF_FFT_SAMPLES >> 1)) & (RINGBUFFER_SIZE - 1);
}

bool SigProc::IsCapturing() {
  return m_isCapturing;
}

inline int16_t SigProc::MAS(int16_t a, int16_t b) {
  int16_t c;
  c = ((int32_t)a * (int32_t)b) >> 15;
  if (c < 0) {
    c++;
  }
  return c;
}

void SigProc::HannWindow(int16_t *re, uint8_t m) {
  uint16_t idx;
  uint16_t istep;
  uint16_t N;
  
  N = (1 << m);
  idx = 0;
  
  istep = N_WAVETABLE / N;

  for (uint16_t n = 0; n < N; n++) {
    re[n] = MAS(re[n], HANN_WINDOW_TABLE[idx]);
    idx += istep;
  }
}

void SigProc::FFT(int16_t *fr, int16_t *fi, uint16_t m) {
  uint16_t N;
  uint16_t Nn;
  uint16_t mr;
  uint16_t l; 
  uint16_t i;
  uint16_t j;
  uint8_t k;
  uint8_t shift;
  uint16_t istep;
  int16_t qr, qi, tr, ti, wr, wi;
  
  N = 1 << m;

  if (N > N_WAVETABLE) {
    return;
  }

  mr = 0;
  Nn = N - 1;

  for (m = 1; m <= Nn; m++) {
    l = N;

    do {
      l >>= 1;
    } while ((mr + l) > Nn);

    mr = (mr & (l - 1)) + l;

    if (mr <= m) {
      continue;
    }

    tr = fr[m];
    fr[m] = fr[mr];
    fr[mr] = tr;
    
    ti = fi[m];
    fi[m] = fi[mr];
    fi[mr] = ti;
  }

  l = 1;    
  k = N_WAVETABLE_bits - 1;

  while (l < N) {
    shift = 1;
    istep = l << 1;

    for (m = 0; m < l; m++) {
      j = m << k;

      wr = COS_3WAVE4_TABLE[j];
      wi = COS_3WAVE4_TABLE[N_WAVETABLE_QUARTER + j];
      
      if (shift) {
        wr >>= 1;
        wi >>= 1;
      }

      for (i = m; i < N; i += istep) {
        j = i + l;
          
        tr = MAS(wr, fr[j]) - MAS(wi, fi[j]);
        ti = MAS(wr, fi[j]) + MAS(wi, fr[j]);
          
        qr = fr[i];
        qi = fi[i];
          
        if (shift)  {
          if (qr < 0)
            qr++;
  
          if (qi < 0)
            qi++;

          qr >>= 1;
          qi >>= 1;
        }

        fr[j] = qr - tr;
        fi[j] = qi - ti;
        fr[i] = qr + tr;
        fi[i] = qi + ti;
      }
    }

    k--;
    l = istep;
  }
}

void SigProc::DebugConsoleOutSamples(uint16_t startIdx, uint16_t stopIdx) {
  Serial.printf("\nSnapshots: %d   ADC-offset: %d   Clipping: %d   ADCpeak: %d\n", m_sensorData->snapshotCtr, m_sensorData->ADCoffset, m_sensorData->clippingCtr, m_sensorData->ADCpeakSample);

  if ((startIdx >= RINGBUFFER_SIZE) || (stopIdx >= RINGBUFFER_SIZE)) {
    Serial.println("Invalid sample index!");
    return;
  }
  
  for (uint16_t sampleNr = startIdx; sampleNr <= stopIdx; sampleNr++) {
    Serial.printf("SAMPLE %03d ", sampleNr);
    for (uint8_t x = 0; x < BARS; x++) {
      if (x < (((sampleRb[sampleNr] + 2048) * BARS) / 4096))
        Serial.printf("#");
      else
        Serial.printf("-");
    }
    Serial.printf(" %d\n", sampleRb[sampleNr]);
  }
}

void SigProc::DebugConsoleOutBins(uint16_t startIdx, uint16_t stopIdx) {
  Serial.printf("\nSnapshots: %d\n", m_sensorData->snapshotCtr);

  if ((startIdx >= NR_OF_BINS) || (stopIdx >= NR_OF_BINS)) {
    Serial.println("Invalid bin index!");
    return;
  }

  for (uint16_t binNr = startIdx; binNr <= stopIdx; binNr++) {
    Serial.printf("BIN %03d ", binNr);
    for (uint8_t x = 0; x < BARS; x++) {
      if (x < ((m_sensorData->bin[binNr].magPeak * BARS) / 16383))
        Serial.printf("#");
      else
        Serial.printf("-");
    }
    Serial.printf(" %d\n", m_sensorData->bin[binNr].magPeak);
  }
}

